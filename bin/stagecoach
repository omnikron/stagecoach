#!/usr/bin/env ruby
# encoding: utf-8
require File.dirname(__FILE__) + '/../lib/stagecoach.rb'

module Stagecoach
  VERSION = File.open(File.dirname(__FILE__) + '/../VERSION').read
  CONFIG_FILE = `pwd`.chomp + '/.stagecoach'
  OLD_CONFIG_FILE = `pwd`.chomp + '/.stagecoach~'

  # Command line options courtesy of the Trollop gem.
  opts = CommandLine.trollop

  staging = 'staging'
  original_branch  = opts[:from]

  # Check that original_branch actually exists.
  unless Git.branch_exist?(original_branch)
    puts "|#{original_branch}| does not exist.".red
    puts "The -f option is for choosing which branch you want to branch out from."
    puts "Run stagecoach -h for help"
    puts "Exiting..."
    exit
  end


  # Initial setup with -s flag.
  if opts[:setup]
    Config.setup
  end


  # Initial setup without -s flag.
  unless File.exist?(CONFIG_FILE)
    puts "No .stagecoach file present, running initial setup."
    Config.setup
  end

  # Load config file to a hash.
  config = Config.yaml_to_hash.with_indifferent_access

  # Checks that command-line args are present and correct.
  Trollop::die :branch, "name must be longer than 1 character" if opts[:branch] && opts[:branch].length <= 1


  # ------------------------------------------------------------------
  # Pivotal Tracker setup
  # ------------------------------------------------------------------

  # Check for pivotal tracker API token in .stagecoach
  if not token = config[:CONFIG_pivotal_tracker_api_token]
    puts "No Pivotal Tracker API token available. "
    print "Enter your API token to continue or hit enter to quit: "
    token = STDIN.gets.chomp
    if token == ''
      puts "Exiting..."
      exit
    elsif token.length < 5
      puts "Input not long enough for a Pivotal Tracker API token.".red
      puts "Exiting..."
      exit
    else
      Config.save('CONFIG_pivotal_tracker_api_token' => token)
    end
  end

  # Set Pivotal Tracker api token for this session
  PivotalTracker::Client.token = token

  # Set Pivotal Tracker project for this repository
  if not project = config[:CONFIG_pivotal_tracker_project]
    puts "No Pivotal Tracker project set for this repository."

    projects = {}
    PivotalTracker::Project.all.collect.with_index {|p, i| projects[i + 1] = p }

    CommandLine.line_break
    puts "Available projects:"
    projects.each {|key, project| print "[#{key.to_s.green}]"; puts ": " + project.name}

    CommandLine.line_break
    print "Choose your project: "
    loop do
      CommandLine.line_break
      input = STDIN.gets.chomp

      if input.to_i && chosen_project = projects[input.to_i]
        Config.save('CONFIG_pivotal_tracker_project' => chosen_project.id)
        config = Config.yaml_to_hash.with_indifferent_access
        puts "Chosen project '#{chosen_project.name}' saved to .stagecoach file"
        CommandLine.line_break
      else
        print "Invalid entry.  Valid options #{projects.keys}:"
        redo
      end
      break
    end
  end

  # ------------------------------------------------------------------
  # Welcome Message
  # ------------------------------------------------------------------
  if @pivotal_project = PivotalTracker::Project.find(config[:CONFIG_pivotal_tracker_project])
    CommandLine.line_break
    puts "Stagecoach connected to '#{@pivotal_project.name.green}' on Pivotal Tracker"
    CommandLine.line_break
  else
    puts "Could not connect to your Pivotal Tracker project"
    puts "Please check your API key and project ID in your .stagecoach file"
    puts "Exiting..."
    exit
  end


  # ------------------------------------------------------------------
  # Git branch operations: list, tidy
  # ------------------------------------------------------------------

  if opts[:list] || opts[:tidy]
    CommandLine.line_break
    puts "-------------------------------------------"
    puts "Local Git Branches created with Stagecoach "
    puts "-------------------------------------------"

    local_stagecoach_branches = Git.local_stagecoach_branches(config)

    all_branches_list = Git.branches
    all_branches_list << Git.current_branch

    deletable_branches = Git.list(local_stagecoach_branches, all_branches_list)

    if opts[:tidy]
      Git.tidy(deletable_branches)
    end
    puts "Complete!  Exiting..."
    exit
  end

  # ------------------------------------------------------------------
  # Initial stage - set up branch and git issue.
  # ------------------------------------------------------------------

  # Checks for uncommitted/unstashed changes and aborts if present.
  if Git.changes != ''
    puts "You have uncommitted changes:".red
    puts Git.changes
    puts "Please commit or stash these changes before running Stagecoach. -h for help."
    puts "Exiting..."
    exit
  end


  unless opts[:deploy_given] or opts[:push]

    # TODO make this for Pivotal Tracker instead
    # If no issue argument has been given.
    if opts[:github].nil? && opts[:story].nil?
      print "Are you working on a pivotal tracker [S]tory or a [G]ithub issue:  "
      case STDIN.gets.chomp
      when /^s/i
        print "Please enter your Pivotal Tracker Story id:  "
        opts[:story] = gets.chomp
      when /^g/i
        print "Please enter your Github issue number:  "
        opts[:github] = gets.chomp
      end
    end

    # Check that the pivotal tracker exists
    if opts[:story]
      pivotal_tracker_story_id = opts[:story]
      begin
        puts "Searching for story number #{pivotal_tracker_story_id}..."
        pivotal_tracker_story = @pivotal_project.stories.find(pivotal_tracker_story_id)
      rescue ActiveResource::ResourceNotFound => e
        puts e.message
        exit
      end

      # And check that it is definitely the right one
      if pivotal_tracker_story.current_state != "unstarted"
        puts "This issue is in status '#{pivotal_tracker_story.current_state}'"
        if pivotal_tracker_story.owned_by.empty?
          puts "But it is not assigned to anybody yet."
        else
          puts "It is assigned to #{pivotal_tracker_story.owned_by}"
        end

        print "Continue? [Y]es or [Q]uit:  "
        case STDIN.gets.chomp
        when /^Y/i
        when /^Q/i
          exit
        end
      end

      # Set the redmine issue status to 'In Bearbeitung'
      redmine_issue.status_id = 2
      redmine_issue.assigned_to_id = config[:redmine_user_id]
      redmine_issue.save
    end

    # TODO: Check that the github issue is not already assigned.

    CommandLine.line_break
    puts "Stagecoach: initial stage"

    # Change to from branch, pull changes, and create a new branch.
    CommandLine.line_break
    puts "Switching to #{original_branch} branch"
    #
    # TODO if there is a file that has been git added but not git committed, it
    # will pop up at this point looking confusing (eg. "A     test_file").
    # Handle this better?
    #
    Git.checkout(original_branch)
    puts "Pulling changes:"
    Git.pull(original_branch)
    if opts[:branch_given]
      new_branch = opts[:branch]
      # Check that the new branch isn't master, because that would be silly
      case new_branch
      when /master/i
        puts "You can't use stagecoach to deploy your master branch.\nExiting..."
        exit
      end
    else
      print "Please enter a new git branch name for your changes (branch will be created from #{original_branch}):  "
      new_branch = STDIN.gets.chomp
    end

    # Check if local branch already exists
    if Git.branch_exist?(new_branch)
      print "There is already a local branch called #{new_branch}.[U]se or [Q]uit:"
      if Git.diff(original_branch, new_branch) != ""
        puts "#{new_branch} is not up to date with #{original_branch}. Please use a different branch or update this one.".red
        CommandLine.line_break
        puts "The following files in branch '#{new_branch}' differ from their #{original_branch} branch versions:"
        puts Git.diff(original_branch, new_branch)
        CommandLine.line_break
        puts "Exiting..."
        exit
      end
      case STDIN.gets.chomp
      when /u/i
        Git.change_to_branch(new_branch)
      when /q/i
        exit
      end
    else
      Git.new_branch(new_branch)
    end

    # Pretty output...
    CommandLine.line_break

    # Issue handling.
    if opts[:github]
      config[Git.current_branch] = {'github_issue' => opts[:github]}
      #TODO check that github issue is not assigned to somebody already
    end

    # Github issues are easier.
    if config[Git.current_branch][:github]
      #TODO what happens if no github issue is found?
      puts "Searching for github issue number #{issue[:number]}..."
      github_issue = Git.issue(issue[:number])
      puts "Issue found: #{github_issue} \n"
    end

    # Saves the branch-specific details for later.
    Config.save(config)
    puts "Happy coding! Run stagecoach -d when you're ready to deploy."
  end

  # ------------------------------------------------------------------
  # Push stage
  # ------------------------------------------------------------------

  if opts[:push]
    # Get the current git branch
    branch = Git.current_branch

    # There's no point in pushing without any commits
    unless Git.branch_has_commits?(branch)
      puts "You don't have any uncommitted changes on branch #{branch}."
      puts "If you have already pushed your changes and wish to deploy this branch, run:"
      puts "stagecoach -d [branch_to_merge_into_and_deploy]"
      puts "#%s for help" % "stagecoach -h".green
      puts "Exiting..."
      exit
    end

    # You never know!  Display git status in case there are any nasty surprises.
    unless Git.status =~ /nothing to commit/
      CommandLine.line_break
      puts "You have a dirty git branch:\n".red
      puts Git.status
      CommandLine.line_break
      print "[P]ush anyway".red
      print " or "
      print "[anything else] to cancel:  ".green
      case STDIN.gets.chomp
      when /p/i
        CommandLine.line_break
        puts "Pushing:"
        CommandLine.line_break
      else
        puts "Exiting..."
        exit
      end
    end

    case branch
    when /master/i
      puts "You can't use stagecoach to push your #{branch} branch.\nExiting..."
      exit
    end

    # Push the branch and give option to continue or quit
    Git.push(branch)

    puts "Push successful."
    unless opts[:deploy_given]
      puts "stagecoach -d [branch_name] to deploy."
      puts "Exiting..."
      exit
    end
  end

  # ------------------------------------------------------------------
  # Deploy stage.
  # ------------------------------------------------------------------

  if opts[:deploy_given]

    # Get the current git branch
    from_branch = Git.current_branch
    to_branch = opts[:deploy]

    unless to_branch =~ /master/i
      Git.merge(to_branch, from_branch)
      if $?.success? == false # if the merge fails, we don't want to push or deploy
        CommandLine.line_break
        puts "Stagecoach will exit because the merge could not be completed automatically".red
        puts "Please complete the merge manually, commit, and then run `stagecoach -d [branch_name]` to deploy"
        exit
      end
      Git.push(to_branch)
    end

    Capistrano.deploy(to_branch)

    # Pivotal tracker story to 'delivered' status
  end
end
