#!/usr/bin/env ruby
# encoding: utf-8
require File.dirname(__FILE__) + '/../lib/stagecoach.rb'

module Stagecoach
  # Command line options courtesy of the Trollop gem.
  # lib/stagecoach/command_line.rb 
  opts = CommandLine.trollop

  # Set up configuration variables.
  config = Config.yaml_to_hash
  config_file = Config.open

  # Checks validity of argument variables.
  # Ignore these checks with -t flag.
  unless opts[:testing_given] 
    Config.setup if config["redmine_site"] == "none"
    Config.setup if config["redmine_api"]  == "none"

    # Checks that command-line args are present and correct.
    Trollop::die :planio, "issue number can only contain digits" if opts[:planio] && opts[:planio][/\D/]
    Trollop::die :github, "issue number can only contain digits" if opts[:github] && opts[:github][/\D/]
    Trollop::die :branch, "name must be longer than 1 character" if opts[:branch] && opts[:branch].length <= 1
    Trollop::die :deploy, "needs some commits! Do some coding before running deploy" if opts [:deploy] && Git.unpushed_commits? == "0" 
  end

  # For changing the Redmine Repo and API key
  if opts[:setup]
    Config.setup
  end

  # Set up redmine client config.
  RedmineApi::Client.instance_eval do
    self.site = config["redmine_site"]
    self.user = config["redmine_api_key"]
  end


  # Initial stage.
  unless opts[:deploy]
    # Checks for uncommitted/unstashed changes and aborts if present.
    if Git.changes.size > 1
      puts "You have uncommitted changes:".red
      puts Git.changes
      puts "Please commit or stash these changes before running Stagecoach. -h for help."
      exit
    end 

    # Change to master, pull changes, and create a new branch
    CommandLine.line_break  
    Git.checkout('master')
    puts "Pulling changes:"
    Git.pull
    if opts[:branch]
      branch = opts[:branch]
    else  
      puts "Please enter a new git branch name for your changes (branch will be created):"
      branch = STDIN.gets.chomp
    end

    # Make sure new local branch does not already exist.
    if Git.branch_exist?(branch)
      puts "There is already a local branch called #{branch}. [Q]uit or [U]se this branch"
      if STDIN.gets.chomp == 'U'
        Git.change_to_branch(branch)
      else
        puts "Exiting..."
        exit
      end
    else
      Git.new_branch(branch)
    end

    # Saves the branch-specific details for later.
    if opts[:github]
      branch_config = {:issue_type => "github", :issue_number => opts[:github]}
    elsif opts[:planio]
      issue_number = opts[:planio]
      branch_config = {:issue_type => "planio", :issue_number => issue_number}

      # Check that the planio issue is not already assigned
      planio_issue = Redmine.issue(issue_number)
      if planio_issue.status.id != '1'
        puts "Warning!".red
        puts "This issue is in status '#{planio_issue.status.name}'"
        puts "It is assigned to #{planio_issue.assigned_to.name}"
        puts "Are you sure you want to continue? [Y]es or [Q]uit"
        case STDIN.gets.chomp
        when 'Y'
        when 'Q'  
          exit
        end
      end
    end
    config[branch] = branch_config
    Config.save(config, config_file)
    puts "Happy coding! Run stagecoach -d when you're ready to deploy."
  end

  # Deploy stage.
  if opts[:deploy]
    issue = {:number => config[Git.current_local_branch][:issue_number], :type => config[Git.current_local_branch][:issue_type]}
    if issue[:type] == 'planio'
      begin
        puts "Searching for planio issue number #{issue[:number]}..."
        @issue = Redmine.issue(issue[:number])
        puts "Issue found: #{@issue.subject} \n" 
      rescue ActiveResource::ResourceNotFound => e
        puts e.message
      end
      # Create a Github issue referencing the planio issue.
      puts "Creating Git issue with subject: " + @issue.subject
      body = "Planio issue: #{Redmine.issue_url(@issue)} \n\n #{@issue.description}"

      # Make sure we are in the correct branch, then create a Git issue.
      Git.correct_branch?
      github_issue =  Git.new_issue(@issue.subject, body)
      github_issue_id = github_issue[/\d+/]

      puts "Would you like to edit the issue on Github? [Y]es or [N]o"
      if STDIN.gets.chomp == 'Y'
        `open #{Git.view_issue(github_issue_id)}` 
        puts "Hit any key once you are done editing to continue"
        sleep unless STDIN.gets.chomp
      else
      end
    elsif issue[:type] == 'github'
      puts "Searching for github issue number #{issue[:number]}..."
      @issue = Git.issue(issue[:number])
      puts "Issue found: #{@issue} \n" 
    end

    # Make sure this is the correct git branch.
    Git.correct_branch?

    # Get things rolling,  if everything else is OK.
    puts "Continue? Type 'push' to start script or anything else to cancel:"
    unless STDIN.gets.chomp == 'push'
      exit
    end

    staging = 'staging'
    master  = 'master'

    Git.push(branch)
    Git.merge(staging, branch)
    Git.push(staging)
    Capistrano.deploy(staging)
    Git.change_to_branch(master)
    CommandLine.line_break
    puts "Attempting to change Planio ticket status to 'Feedback' for you"
    @issue.status_id = 4
    @issue.save
    Redmine.test_issue(@issue)
  end
end
